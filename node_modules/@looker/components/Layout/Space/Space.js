let _ = t => t,
    _t,
    _t2,
    _t3,
    _t4;

import styled, { css } from 'styled-components';
import { flexbox, shouldForwardProp, variant } from '@looker/design-tokens';
import { commonLayoutCSS } from '../utils/common';
export const defaultGap = 'u4';
export const spaceCSS = css(_t || (_t = _`
  ${0}
  ${0}

  display: flex;
`), commonLayoutCSS, flexbox);

const fauxGap = ({
  gap: _gap = defaultGap,
  reverse
}) => css(_t2 || (_t2 = _`
  && > * {
    margin-right: ${0};
  }

  ${0}
`), ({
  theme: {
    space
  }
}) => space[_gap], ({
  theme: {
    space
  }
}) => reverse ? `&& > *:first-child { margin-right: ${space.none}; }` : `&& > *:last-child { margin-right: ${space.none}; }`);

const flexGap = ({
  gap: _gap2 = defaultGap,
  reverse
}) => css(_t3 || (_t3 = _`
  @supports (-moz-appearance: none) {
    gap: 0 ${0};
  }

  @supports not (-moz-appearance: none) {
    ${0}
  }
`), ({
  theme: {
    space
  }
}) => space[_gap2], fauxGap({
  gap: _gap2,
  reverse
}));

const verticalAlign = variant({
  prop: 'align',
  variants: {
    center: {
      alignItems: 'center'
    },
    end: {
      alignItems: 'flex-end'
    },
    start: {
      alignItems: 'flex-start'
    }
  }
});
const justify = variant({
  prop: 'justify',
  variants: {
    center: {
      justifyContent: 'center'
    },
    end: {
      justifyContent: 'flex-end'
    },
    start: {
      justifyContent: 'flex-start'
    }
  }
});
export const Space = styled.div.withConfig({
  shouldForwardProp,
  displayName: "Space",
  componentId: "sc-zsz5hl-0"
}).attrs(({
  alignItems: _alignItems = 'center',
  width: _width = '100%'
}) => ({
  alignItems: _alignItems,
  width: _width
}))(_t4 || (_t4 = _`
  ${0}
  ${0}
  ${0}
  flex-direction: ${0};

  ${0}
  ${0}
  ${0}
  ${0}
`), spaceCSS, ({
  stretch
}) => !stretch && verticalAlign, ({
  stretch
}) => !stretch && justify, ({
  reverse
}) => reverse ? 'row-reverse' : 'row', ({
  around
}) => around && 'justify-content: space-around;', ({
  between
}) => between && 'justify-content: space-between;', ({
  evenly
}) => evenly && 'justify-content: space-evenly;', ({
  around,
  between,
  evenly
}) => !around && !between && !evenly && flexGap);
//# sourceMappingURL=Space.js.map