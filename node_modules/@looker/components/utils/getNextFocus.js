export const getTabStops = ref => Array.from(ref.querySelectorAll('a,button:not(:disabled),[tabindex="0"],[tabindex="-1"]:not(:disabled)'));
export const getFallbackElement = (direction, containerElement, tabStops) => {
  let fallback;

  if (direction === 1) {
    const firstVisibleChild = tabStops.find(childElement => {
      return childElement.offsetTop >= containerElement.scrollTop;
    });
    if (firstVisibleChild) fallback = firstVisibleChild;else fallback = tabStops[0];
  } else {
    fallback = tabStops[tabStops.length - 1];
  }

  return fallback;
};
export const getNextFocus = (direction, element) => {
  const tabStops = getTabStops(element);

  if (tabStops.length > 0) {
    if (document.activeElement && tabStops.includes(document.activeElement)) {
      const next = tabStops.findIndex(el => el === document.activeElement) + direction;

      if (next === tabStops.length || !tabStops[next]) {
        return getFallbackElement(direction, element, tabStops);
      }

      return tabStops[next];
    }

    return getFallbackElement(direction, element, tabStops);
  }

  return null;
};
//# sourceMappingURL=getNextFocus.js.map