import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
const _excluded = ["onSelectDate", "selectedDate", "viewMonth"],
      _excluded2 = ["onSelectRange", "selectedRange", "viewMonth"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import { dateFnLocaleMap } from '@looker/i18n';
import React, { useState } from 'react';
import { defaultArgTypes as argTypes } from '@looker/storybook';
import { Calendar } from './Calendar';
export default {
  argTypes: _objectSpread(_objectSpread({}, argTypes), {}, {
    locale: {
      control: {
        type: 'select'
      },
      mapping: dateFnLocaleMap,
      options: Object.keys(dateFnLocaleMap)
    }
  }),
  component: Calendar,
  title: 'Calendar'
};

const Template = _ref => {
  let {
    onSelectDate,
    selectedDate,
    viewMonth: viewMonthProp
  } = _ref,
      args = _objectWithoutProperties(_ref, _excluded);

  const [date, setDate] = useState(selectedDate);

  const handleSelect = newDate => {
    onSelectDate === null || onSelectDate === void 0 ? void 0 : onSelectDate(newDate);
    setDate(newDate);
  };

  const [viewMonth, setViewMonth] = useState(viewMonthProp);
  return React.createElement(Calendar, _extends({}, args, {
    onSelectDate: handleSelect,
    selectedDate: date,
    viewMonth: viewMonth,
    onMonthChange: setViewMonth
  }));
};

const TemplateRange = _ref2 => {
  let {
    onSelectRange,
    selectedRange,
    viewMonth: viewMonthProp
  } = _ref2,
      args = _objectWithoutProperties(_ref2, _excluded2);

  const [range, setRange] = useState(selectedRange);

  const handleSelect = newRange => {
    onSelectRange === null || onSelectRange === void 0 ? void 0 : onSelectRange(newRange);
    setRange(newRange);
  };

  const [viewMonth, setViewMonth] = useState(viewMonthProp);
  return React.createElement(Calendar, _extends({}, args, {
    isRange: true,
    onSelectRange: handleSelect,
    selectedRange: range,
    viewMonth: viewMonth,
    onMonthChange: setViewMonth
  }));
};

export const Basic = Template.bind({});
Basic.args = {
  viewMonth: new Date('Jul 1, 2021')
};
Basic.parameters = {
  storyshots: {
    disable: true
  }
};
export const Range = TemplateRange.bind({});
Range.args = {
  viewMonth: new Date('Feb 1, 2022')
};
Range.parameters = {
  storyshots: {
    disable: true
  }
};
//# sourceMappingURL=Calendar.stories.js.map